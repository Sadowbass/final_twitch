<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store">

     <!-- 상품 주문 -->
     
     <insert id="order">
     
     insert into store_order(order_serial, mem_id, get_name, get_phone, zip_code, address1, address2, amount, order_date, order_state)
     values(seq_storeorder.nextval, #{mem_id}, #{get_name}, #{get_phone}, #{zip_code}, #{address1}, #{address2}, #{amount}, sysdate, 0)
     
     </insert>
     
     <insert id="order_details">
     
     insert into order_details(ORDERDETAILS_SERIAL, ORDER_SERIAL, PRODUCT_ID, CART_COUNT, MEM_ID, ORDER_SIZE)
     values(seq_orderdetails.nextval, seq_storeorder.currval, #{product_id}, #{cart_count}, #{mem_id}, #{order_size} )
     
     </insert>

     <!-- 장바구니 인서트 -->
    <insert id="cart_insert" parameterType="bean.StoreCartVo">
      
      insert into cart(cart_id, mem_id, product_id, cart_count, cart_date, product_size)
      values(seq_storecart.nextval, #{mem_id, jdbcType=VARCHAR}, #{product_id}, #{cart_count}, sysdate, ${product_size})
      
    </insert>
    
    
     <!-- 리뷰 작성 -->
	<insert id="review_insert" parameterType="bean.StoreReviewVo">
	  
	  insert into review(review_id, mem_id, product_id, rsubject, rcontent, review_like, review_date)
      values( seq_storereview.nextval , #{mem_id, jdbcType=VARCHAR, javaType=String}, 
      		#{product_id, jdbcType=VARCHAR, javaType=Integer}, #{rSubject, jdbcType=VARCHAR, javaType=String}, 
      		#{rContent, jdbcType=VARCHAR, javaType=String}, #{review_like, jdbcType=VARCHAR, javaType=Double},  sysdate)
	  
	</insert>
	
	<insert id="review_photo_insert" parameterType="bean.StoreReviewPhotoVo">
	  
	  insert into review_photo(review_pid, review_id, image1, image2, rp_date)
      values( seq_storereview_photo.nextval, seq_storereview.currval, #{image1, jdbcType=VARCHAR}, #{image2, jdbcType=VARCHAR},  sysdate)
	  
	</insert>
	
	<!-- cart 조회 -->
	<select id="cart_select" resultType="bean.StoreCartVo">
    <!-- DAO에서 listCart라는 태그로 인해 실행되고 결과타입은 DTO타입으로 한다. (다른계층으로 보내기 위해서) -->
    
        select cart_id, p.product_id, c.mem_id, p.product_name, c.cart_count, c.product_size, p.product_price, min(pp.sysfile) sysfile, (p.product_price*c.cart_count) totPrice
        <!-- 장바구니의 번호, 상품 번호, 회원번호, 회원이름, 상품이름, 상품의양, 상품1개의 가격, 상품의 전체가격을 검색한다.-->
        <!--양쪽 테이블에 다 있는 속성이면 어떤 테이블의 속성인지 정확히 표기해주어야 한다.-->
        
        from cart c, product p, product_photo pp
        <!--  장바구니 테이블과, 상품테이블, 상품 포토테이블 로 부터 -->
        
        where c.product_id=p.product_id and p.product_id = pp.product_id and c.mem_id=#{mem_id} 
        <!-- 장바구니의 상품id와 상품테이블의 상품id가 같고, 장바구니테이블의 회원id가  장바구니에 저장되있는 회원id와 같을때-->
        <!-- 장바구니에 관한 정보를 담은 sql문이다. -->
        group by cart_id, p.product_id, c.mem_id, p.product_name, c.cart_count, c.product_size, p.product_price
        
        order by cart_id
                    
    </select>
	
	<select id="cart_sumMoney" resultType="int">

        select nvl(sum(p.product_price*c.cart_count),0)
        <!--금액과 상품갯수를 곱한값과 0을더해서 0이 나오는 것을 검색한다. -->
        <!--그러니까 아무것도 담지 않았을때를 확인하는 것이다. -->
        <!--빈값이 null이면 안되기 때문에 대체값으로 0이 출력되게끔 만들었다-->

        from cart c,product p
        <!-- 장바구니 테이블과 상품 테이블로 부터 -->

        where c.product_id=p.product_id and mem_id=#{mem_id}
        <!--조건 : 장바구니테이블의 상품 id가 상품테이블의 상품 id와 같고, 요청하는 회원의 id와 같은 경우 -->

    </select>
	
	<!-- 장바구니에 동일한 상품 있는 지 확인 -->
	
	<select id="countCart" resultType="int">
	  select count(*)
	  from cart
	  where mem_id = #{mem_id}
	  and product_id =#{product_id}
	</select>
	
	<!-- 리뷰보기 -->
	<select id="review_select" resultMap="store_map">
	   
	   select r.review_id , r.mem_id, r.product_id , r.rSubject, r.rContent, r.review_like , r.review_date, rp.review_id, rp.image1, rp.image2   
	   from review r left outer join review_photo rp
	   on r.review_id = rp.review_id
	   order by review_date desc
	   
	</select>
	
	<resultMap type="bean.StoreReviewVo" id="store_map">
    <result column="review_id" property="review_id"/>
    <result column="mem_id" property="mem_id"/>
    <result column="product_id" property="product_id"/>
    <result column="rSubject" property="rSubject"/>
    <result column="rContent" property="rContent"/>
    <result column="review_like" property="review_like"/>
    <result column="review_date" property="review_date"/>
      <collection property="rpList" javaType="java.util.ArrayList" ofType="bean.StoreReviewPhotoVo"  >
         <result column="review_pid" property="review_pid"/>
         <result column="image1" property="image1"/>
         <result column="image2" property="image2"/>
      </collection>
  </resultMap>
	
  
  <select id="faq_select"  resultType='bean.StoreFaqVo'>
     select qna_id, qna_subject, qna_content from store_qna
  </select>
  
  <select id="review_photo" parameterType='Integer' resultType='bean.StoreReviewPhotoVo'>
     select review_pid, review_id, image1, image2, rp_date from review_photo where review_id=#{review_id}
  </select>
  
      <!--메인페이지 상품목록-->
    <select id="mainpage_list" resultType="bean.ProductVo">
        select p.PRODUCT_ID product_id,
               p.PRODUCT_PRICE product_price,
               pp.SYSFILE sysfile,
               p.PRODUCT_NAME product_name,
               p.PRODUCT_EXPLAIN product_explain
        from PRODUCT p
                 join PRODUCT_PHOTO PP on p.PRODUCT_ID = PP.PRODUCT_ID
        order by p.PRODUCT_ID, PHOTO_SERIAL
    </select>

    <!--카테고리별 상품목록-->
    <select id="mainpage_list_cate" parameterType="String" resultType="bean.ProductVo">
        select p.PRODUCT_ID product_id,
               p.PRODUCT_PRICE product_price,
               pp.SYSFILE sysfile,
               p.PRODUCT_NAME product_name,
               p.PRODUCT_EXPLAIN product_explain
        from PRODUCT p
                 join PRODUCT_PHOTO PP on p.PRODUCT_ID = PP.PRODUCT_ID
        where lower(p.PRODUCT_CATE) like '%${value }%'
        order by p.PRODUCT_ID, PHOTO_SERIAL
    </select>

    <!--상품 상세보기-->
    <select id="detailView" parameterType="String" resultType="bean.ProductVo">
        select p.PRODUCT_ID product_id,
               p.PRODUCT_PRICE product_price,
               pp.SYSFILE sysfile,
               p.PRODUCT_NAME product_name,
               p.PRODUCT_EXPLAIN product_explain
        from PRODUCT p
                 join PRODUCT_PHOTO PP on p.PRODUCT_ID = PP.PRODUCT_ID
        where p.PRODUCT_ID = ${value }
        order by PHOTO_SERIAL
    </select>
    <!-- 리뷰 지우기 -->
  <delete id="review_delete" parameterType="bean.StoreReviewVo">
    delete from review where review_id = #{review_id}
  </delete>
  
  <delete id="review_photo_delete" parameterType="bean.StoreReviewPhotoVo">
    delete from review_photo where review_id = #{review_id}
  </delete>
  
  <!-- 장바구니 비우기 -->
    <delete id="cart_deleteAll">
        delete from cart where mem_id=#{mem_id}
        <!-- 장바구니테이블로부터 회원의 아이디와 삭제하고자하는 회원의 아이디가 같으면 장바구니에 있는 자료를 전부다 삭제 -->
    </delete>
    
    <!-- 부분장바구니 삭제 -->
    
    <delete id="cart_delete">
      delete from cart
      where cart_id= #{cart_id}
    </delete>
	
	<!-- 장바구니 수정 -->
	<update id="cart_modify">
	  update cart
	  set cart_count = #{cart_count}
	  where mem_id = #{mem_id, jdbcType=VARCHAR}
	  and product_id = #{product_id}
	</update>
	
	<!-- 장바구니에 동일한 상품이 존재하면 수정 -->
	
	<update id="updateCart">
	  update cart
	  set cart_count = cart_count + #{cart_count}
	  where mem_id = #{mem_id}
	  and product_id = #{product_id}
	</update>
	
</mapper>

