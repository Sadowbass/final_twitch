<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store">
     <!-- 장바구니 -->
    <insert id="cart_insert" parameterType="bean.StoreCartVo">
      
      insert into cart(cart_id, mem_id, product_id, cart_count, cart_date, product_size)
      values(seq_storecart.nextval, #{mem_id, jdbcType=VARCHAR}, #{product_id}, #{cart_count}, sysdate, #{product_size})
      
    </insert>
    
    
     <!-- 리뷰 작성 -->
	<insert id="review_insert" parameterType="bean.StoreReviewVo">
	  
	  insert into review(review_id, mem_id, product_id, rsubject, rcontent, review_like, review_date)
      values( seq_storereview.nextval , #{mem_id, jdbcType=VARCHAR, javaType=String}, 
      		#{product_id, jdbcType=VARCHAR, javaType=Integer}, #{rSubject, jdbcType=VARCHAR, javaType=String}, 
      		#{rContent, jdbcType=VARCHAR, javaType=String}, #{review_like, jdbcType=VARCHAR, javaType=Double},  sysdate)
	  
	</insert>
	
	<insert id="review_photo_insert" parameterType="bean.StoreReviewPhotoVo">
	  
	  insert into review_photo(review_pid, review_id, image1, image2, rp_date)
      values( seq_storereview_photo.nextval, seq_storereview.currval, #{image1, jdbcType=VARCHAR}, #{image2, jdbcType=VARCHAR},  sysdate)
	  
	</insert>
	
	<select id="listCart" resultType="bean.StoreCartVo">
    <!-- DAO에서 listCart라는 태그로 인해 실행되고 결과타입은 DTO타입으로 한다. (다른계층으로 보내기 위해서) -->
    
        select cart_id, p.product_id, c.userid, name, product_name, amount, price, (price*amount) money
        <!-- 장바구니의 번호, 상품 번호, 회원번호, 회원이름, 상품이름, 상품의양, 상품1개의 가격, 상품의 전체가격을 검색한다.-->
        <!--양쪽 테이블에 다 있는 속성이면 어떤 테이블의 속성인지 정확히 표기해주어야 한다.-->
        
        from member m, cart c, product p
        <!-- 회원테이블과, 장바구니 테이블과, 상품테이블로 부터 -->
        
        where m.userid=c.userid and c.product_id=p.product_id and c.userid=#{userid} order by cart_id
        <!--회원테이블의 회원id와 장바구니테이블의 회원id가 같고, 장바구니의 상품id와 상품테이블의 상품id가 같고, 장바구니테이블의 회원id가  장바구니에 저장되있는 회원id와 같을때-->
        <!-- 장바구니에 관한 정보를 담은 sql문이다. -->
                    
    </select>
	
	
	<!-- 리뷰보기 -->
	<select id="review_select" resultMap="store_map">
	   
	   select r.review_id , r.mem_id, r.product_id , r.rSubject, r.rContent, r.review_like , r.review_date, rp.review_id, rp.image1, rp.image2   
	   from review r left outer join review_photo rp
	   on r.review_id = rp.review_id
	   order by review_date desc
	   
	</select>
	
	<resultMap type="bean.StoreReviewVo" id="store_map">
    <result column="review_id" property="review_id"/>
    <result column="mem_id" property="mem_id"/>
    <result column="product_id" property="product_id"/>
    <result column="rSubject" property="rSubject"/>
    <result column="rContent" property="rContent"/>
    <result column="review_like" property="review_like"/>
    <result column="review_date" property="review_date"/>
      <collection property="rpList" javaType="java.util.ArrayList" ofType="bean.StoreReviewPhotoVo"  >
         <result column="review_pid" property="review_pid"/>
         <result column="image1" property="image1"/>
         <result column="image2" property="image2"/>
      </collection>
  </resultMap>
	
  
  <select id="faq_select"  resultType='bean.StoreFaqVo'>
     select qna_id, qna_subject, qna_content from store_qna
  </select>
  
  <select id="review_photo" parameterType='Integer' resultType='bean.StoreReviewPhotoVo'>
     select review_pid, review_id, image1, image2, rp_date from review_photo where review_id=#{review_id}
  </select>
  
      <!--메인페이지 상품목록-->
    <select id="mainpage_list" resultType="bean.ProductVo">
        select p.PRODUCT_ID product_id,
               p.PRODUCT_PRICE product_price,
               pp.SYSFILE sysfile,
               p.PRODUCT_NAME product_name,
               p.PRODUCT_EXPLAIN product_explain
        from PRODUCT p
                 join PRODUCT_PHOTO PP on p.PRODUCT_ID = PP.PRODUCT_ID
        order by p.PRODUCT_ID, PHOTO_SERIAL
    </select>

    <!--카테고리별 상품목록-->
    <select id="mainpage_list_cate" parameterType="String" resultType="bean.ProductVo">
        select p.PRODUCT_ID product_id,
               p.PRODUCT_PRICE product_price,
               pp.SYSFILE sysfile,
               p.PRODUCT_NAME product_name,
               p.PRODUCT_EXPLAIN product_explain
        from PRODUCT p
                 join PRODUCT_PHOTO PP on p.PRODUCT_ID = PP.PRODUCT_ID
        where lower(p.PRODUCT_CATE) like '%${value }%'
        order by p.PRODUCT_ID, PHOTO_SERIAL
    </select>

    <!--상품 상세보기-->
    <select id="detailView" parameterType="String" resultType="bean.ProductVo">
        select p.PRODUCT_ID product_id,
               p.PRODUCT_PRICE product_price,
               pp.SYSFILE sysfile,
               p.PRODUCT_NAME product_name,
               p.PRODUCT_EXPLAIN product_explain
        from PRODUCT p
                 join PRODUCT_PHOTO PP on p.PRODUCT_ID = PP.PRODUCT_ID
        where p.PRODUCT_ID = ${value }
        order by PHOTO_SERIAL
    </select>
    <!-- 리뷰 지우기 -->
  <delete id="review_delete" parameterType="bean.StoreReviewVo">
    delete from review where review_id = #{review_id}
  </delete>
  
  <delete id="review_photo_delete" parameterType="bean.StoreReviewPhotoVo">
    delete from review_photo where review_id = #{review_id}
  </delete>
	
</mapper>

